// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: update_metadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "update_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace chromeos_update_engine {
class ExtentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Extent>
     _instance;
} _Extent_default_instance_;
class Signatures_SignatureDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Signatures_Signature>
     _instance;
} _Signatures_Signature_default_instance_;
class SignaturesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Signatures>
     _instance;
} _Signatures_default_instance_;
class PartitionInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PartitionInfo>
     _instance;
} _PartitionInfo_default_instance_;
class ImageInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ImageInfo>
     _instance;
} _ImageInfo_default_instance_;
class InstallOperationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InstallOperation>
     _instance;
} _InstallOperation_default_instance_;
class PartitionUpdateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PartitionUpdate>
     _instance;
} _PartitionUpdate_default_instance_;
class DeltaArchiveManifestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DeltaArchiveManifest>
     _instance;
} _DeltaArchiveManifest_default_instance_;

namespace protobuf_update_5fmetadata_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Extent_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Extent_default_instance_);_Signatures_Signature_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Signatures_Signature_default_instance_);_Signatures_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Signatures_default_instance_);_PartitionInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PartitionInfo_default_instance_);_ImageInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ImageInfo_default_instance_);_InstallOperation_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InstallOperation_default_instance_);_PartitionUpdate_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PartitionUpdate_default_instance_);_DeltaArchiveManifest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DeltaArchiveManifest_default_instance_);_PartitionUpdate_default_instance_._instance.get_mutable()->old_partition_info_ = const_cast< ::chromeos_update_engine::PartitionInfo*>(
      ::chromeos_update_engine::PartitionInfo::internal_default_instance());
  _PartitionUpdate_default_instance_._instance.get_mutable()->new_partition_info_ = const_cast< ::chromeos_update_engine::PartitionInfo*>(
      ::chromeos_update_engine::PartitionInfo::internal_default_instance());
  _DeltaArchiveManifest_default_instance_._instance.get_mutable()->old_kernel_info_ = const_cast< ::chromeos_update_engine::PartitionInfo*>(
      ::chromeos_update_engine::PartitionInfo::internal_default_instance());
  _DeltaArchiveManifest_default_instance_._instance.get_mutable()->new_kernel_info_ = const_cast< ::chromeos_update_engine::PartitionInfo*>(
      ::chromeos_update_engine::PartitionInfo::internal_default_instance());
  _DeltaArchiveManifest_default_instance_._instance.get_mutable()->old_rootfs_info_ = const_cast< ::chromeos_update_engine::PartitionInfo*>(
      ::chromeos_update_engine::PartitionInfo::internal_default_instance());
  _DeltaArchiveManifest_default_instance_._instance.get_mutable()->new_rootfs_info_ = const_cast< ::chromeos_update_engine::PartitionInfo*>(
      ::chromeos_update_engine::PartitionInfo::internal_default_instance());
  _DeltaArchiveManifest_default_instance_._instance.get_mutable()->old_image_info_ = const_cast< ::chromeos_update_engine::ImageInfo*>(
      ::chromeos_update_engine::ImageInfo::internal_default_instance());
  _DeltaArchiveManifest_default_instance_._instance.get_mutable()->new_image_info_ = const_cast< ::chromeos_update_engine::ImageInfo*>(
      ::chromeos_update_engine::ImageInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}

}  // namespace protobuf_update_5fmetadata_2eproto

bool InstallOperation_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const InstallOperation_Type InstallOperation::REPLACE;
const InstallOperation_Type InstallOperation::REPLACE_BZ;
const InstallOperation_Type InstallOperation::MOVE;
const InstallOperation_Type InstallOperation::BSDIFF;
const InstallOperation_Type InstallOperation::SOURCE_COPY;
const InstallOperation_Type InstallOperation::SOURCE_BSDIFF;
const InstallOperation_Type InstallOperation::ZERO;
const InstallOperation_Type InstallOperation::DISCARD;
const InstallOperation_Type InstallOperation::REPLACE_XZ;
const InstallOperation_Type InstallOperation::IMGDIFF;
const InstallOperation_Type InstallOperation::Type_MIN;
const InstallOperation_Type InstallOperation::Type_MAX;
const int InstallOperation::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Extent::kStartBlockFieldNumber;
const int Extent::kNumBlocksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Extent::Extent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_update_5fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chromeos_update_engine.Extent)
}
Extent::Extent(const Extent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_block_, &from.start_block_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_blocks_) -
    reinterpret_cast<char*>(&start_block_)) + sizeof(num_blocks_));
  // @@protoc_insertion_point(copy_constructor:chromeos_update_engine.Extent)
}

void Extent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&start_block_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_blocks_) -
      reinterpret_cast<char*>(&start_block_)) + sizeof(num_blocks_));
}

Extent::~Extent() {
  // @@protoc_insertion_point(destructor:chromeos_update_engine.Extent)
  SharedDtor();
}

void Extent::SharedDtor() {
}

void Extent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Extent& Extent::default_instance() {
  protobuf_update_5fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Extent* Extent::New(::google::protobuf::Arena* arena) const {
  Extent* n = new Extent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Extent::Clear() {
// @@protoc_insertion_point(message_clear_start:chromeos_update_engine.Extent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&start_block_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_blocks_) -
        reinterpret_cast<char*>(&start_block_)) + sizeof(num_blocks_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Extent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chromeos_update_engine.Extent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start_block = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_start_block();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_block_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 num_blocks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num_blocks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_blocks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chromeos_update_engine.Extent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chromeos_update_engine.Extent)
  return false;
#undef DO_
}

void Extent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chromeos_update_engine.Extent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 start_block = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start_block(), output);
  }

  // optional uint64 num_blocks = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->num_blocks(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chromeos_update_engine.Extent)
}

size_t Extent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chromeos_update_engine.Extent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 start_block = 1;
    if (has_start_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_block());
    }

    // optional uint64 num_blocks = 2;
    if (has_num_blocks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_blocks());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Extent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Extent*>(&from));
}

void Extent::MergeFrom(const Extent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chromeos_update_engine.Extent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      start_block_ = from.start_block_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_blocks_ = from.num_blocks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Extent::CopyFrom(const Extent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chromeos_update_engine.Extent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extent::IsInitialized() const {
  return true;
}

void Extent::Swap(Extent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Extent::InternalSwap(Extent* other) {
  using std::swap;
  swap(start_block_, other->start_block_);
  swap(num_blocks_, other->num_blocks_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Extent::GetTypeName() const {
  return "chromeos_update_engine.Extent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Extent

// optional uint64 start_block = 1;
bool Extent::has_start_block() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Extent::set_has_start_block() {
  _has_bits_[0] |= 0x00000001u;
}
void Extent::clear_has_start_block() {
  _has_bits_[0] &= ~0x00000001u;
}
void Extent::clear_start_block() {
  start_block_ = GOOGLE_ULONGLONG(0);
  clear_has_start_block();
}
::google::protobuf::uint64 Extent::start_block() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.Extent.start_block)
  return start_block_;
}
void Extent::set_start_block(::google::protobuf::uint64 value) {
  set_has_start_block();
  start_block_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.Extent.start_block)
}

// optional uint64 num_blocks = 2;
bool Extent::has_num_blocks() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Extent::set_has_num_blocks() {
  _has_bits_[0] |= 0x00000002u;
}
void Extent::clear_has_num_blocks() {
  _has_bits_[0] &= ~0x00000002u;
}
void Extent::clear_num_blocks() {
  num_blocks_ = GOOGLE_ULONGLONG(0);
  clear_has_num_blocks();
}
::google::protobuf::uint64 Extent::num_blocks() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.Extent.num_blocks)
  return num_blocks_;
}
void Extent::set_num_blocks(::google::protobuf::uint64 value) {
  set_has_num_blocks();
  num_blocks_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.Extent.num_blocks)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signatures_Signature::kVersionFieldNumber;
const int Signatures_Signature::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signatures_Signature::Signatures_Signature()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_update_5fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chromeos_update_engine.Signatures.Signature)
}
Signatures_Signature::Signatures_Signature(const Signatures_Signature& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:chromeos_update_engine.Signatures.Signature)
}

void Signatures_Signature::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
}

Signatures_Signature::~Signatures_Signature() {
  // @@protoc_insertion_point(destructor:chromeos_update_engine.Signatures.Signature)
  SharedDtor();
}

void Signatures_Signature::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Signatures_Signature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Signatures_Signature& Signatures_Signature::default_instance() {
  protobuf_update_5fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Signatures_Signature* Signatures_Signature::New(::google::protobuf::Arena* arena) const {
  Signatures_Signature* n = new Signatures_Signature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Signatures_Signature::Clear() {
// @@protoc_insertion_point(message_clear_start:chromeos_update_engine.Signatures.Signature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Signatures_Signature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chromeos_update_engine.Signatures.Signature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chromeos_update_engine.Signatures.Signature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chromeos_update_engine.Signatures.Signature)
  return false;
#undef DO_
}

void Signatures_Signature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chromeos_update_engine.Signatures.Signature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chromeos_update_engine.Signatures.Signature)
}

size_t Signatures_Signature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chromeos_update_engine.Signatures.Signature)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signatures_Signature::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Signatures_Signature*>(&from));
}

void Signatures_Signature::MergeFrom(const Signatures_Signature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chromeos_update_engine.Signatures.Signature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Signatures_Signature::CopyFrom(const Signatures_Signature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chromeos_update_engine.Signatures.Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signatures_Signature::IsInitialized() const {
  return true;
}

void Signatures_Signature::Swap(Signatures_Signature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signatures_Signature::InternalSwap(Signatures_Signature* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Signatures_Signature::GetTypeName() const {
  return "chromeos_update_engine.Signatures.Signature";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Signatures_Signature

// optional uint32 version = 1;
bool Signatures_Signature::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Signatures_Signature::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void Signatures_Signature::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void Signatures_Signature::clear_version() {
  version_ = 0u;
  clear_has_version();
}
::google::protobuf::uint32 Signatures_Signature::version() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.Signatures.Signature.version)
  return version_;
}
void Signatures_Signature::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.Signatures.Signature.version)
}

// optional bytes data = 2;
bool Signatures_Signature::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Signatures_Signature::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void Signatures_Signature::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void Signatures_Signature::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& Signatures_Signature::data() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.Signatures.Signature.data)
  return data_.GetNoArena();
}
void Signatures_Signature::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.Signatures.Signature.data)
}
#if LANG_CXX11
void Signatures_Signature::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chromeos_update_engine.Signatures.Signature.data)
}
#endif
void Signatures_Signature::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.Signatures.Signature.data)
}
void Signatures_Signature::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.Signatures.Signature.data)
}
::std::string* Signatures_Signature::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.Signatures.Signature.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Signatures_Signature::release_data() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.Signatures.Signature.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Signatures_Signature::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.Signatures.Signature.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signatures::kSignaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signatures::Signatures()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_update_5fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chromeos_update_engine.Signatures)
}
Signatures::Signatures(const Signatures& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      signatures_(from.signatures_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chromeos_update_engine.Signatures)
}

void Signatures::SharedCtor() {
  _cached_size_ = 0;
}

Signatures::~Signatures() {
  // @@protoc_insertion_point(destructor:chromeos_update_engine.Signatures)
  SharedDtor();
}

void Signatures::SharedDtor() {
}

void Signatures::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Signatures& Signatures::default_instance() {
  protobuf_update_5fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

Signatures* Signatures::New(::google::protobuf::Arena* arena) const {
  Signatures* n = new Signatures;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Signatures::Clear() {
// @@protoc_insertion_point(message_clear_start:chromeos_update_engine.Signatures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signatures_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Signatures::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chromeos_update_engine.Signatures)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chromeos_update_engine.Signatures.Signature signatures = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signatures()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chromeos_update_engine.Signatures)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chromeos_update_engine.Signatures)
  return false;
#undef DO_
}

void Signatures::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chromeos_update_engine.Signatures)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chromeos_update_engine.Signatures.Signature signatures = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signatures_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->signatures(static_cast<int>(i)), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chromeos_update_engine.Signatures)
}

size_t Signatures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chromeos_update_engine.Signatures)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .chromeos_update_engine.Signatures.Signature signatures = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->signatures_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signatures(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signatures::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Signatures*>(&from));
}

void Signatures::MergeFrom(const Signatures& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chromeos_update_engine.Signatures)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signatures_.MergeFrom(from.signatures_);
}

void Signatures::CopyFrom(const Signatures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chromeos_update_engine.Signatures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signatures::IsInitialized() const {
  return true;
}

void Signatures::Swap(Signatures* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signatures::InternalSwap(Signatures* other) {
  using std::swap;
  signatures_.InternalSwap(&other->signatures_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string Signatures::GetTypeName() const {
  return "chromeos_update_engine.Signatures";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Signatures

// repeated .chromeos_update_engine.Signatures.Signature signatures = 1;
int Signatures::signatures_size() const {
  return signatures_.size();
}
void Signatures::clear_signatures() {
  signatures_.Clear();
}
const ::chromeos_update_engine::Signatures_Signature& Signatures::signatures(int index) const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.Signatures.signatures)
  return signatures_.Get(index);
}
::chromeos_update_engine::Signatures_Signature* Signatures::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.Signatures.signatures)
  return signatures_.Mutable(index);
}
::chromeos_update_engine::Signatures_Signature* Signatures::add_signatures() {
  // @@protoc_insertion_point(field_add:chromeos_update_engine.Signatures.signatures)
  return signatures_.Add();
}
::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::Signatures_Signature >*
Signatures::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:chromeos_update_engine.Signatures.signatures)
  return &signatures_;
}
const ::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::Signatures_Signature >&
Signatures::signatures() const {
  // @@protoc_insertion_point(field_list:chromeos_update_engine.Signatures.signatures)
  return signatures_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartitionInfo::kSizeFieldNumber;
const int PartitionInfo::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartitionInfo::PartitionInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_update_5fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chromeos_update_engine.PartitionInfo)
}
PartitionInfo::PartitionInfo(const PartitionInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash()) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:chromeos_update_engine.PartitionInfo)
}

void PartitionInfo::SharedCtor() {
  _cached_size_ = 0;
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = GOOGLE_ULONGLONG(0);
}

PartitionInfo::~PartitionInfo() {
  // @@protoc_insertion_point(destructor:chromeos_update_engine.PartitionInfo)
  SharedDtor();
}

void PartitionInfo::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PartitionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PartitionInfo& PartitionInfo::default_instance() {
  protobuf_update_5fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PartitionInfo* PartitionInfo::New(::google::protobuf::Arena* arena) const {
  PartitionInfo* n = new PartitionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PartitionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chromeos_update_engine.PartitionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_hash()) {
    GOOGLE_DCHECK(!hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*hash_.UnsafeRawStringPointer())->clear();
  }
  size_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PartitionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chromeos_update_engine.PartitionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chromeos_update_engine.PartitionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chromeos_update_engine.PartitionInfo)
  return false;
#undef DO_
}

void PartitionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chromeos_update_engine.PartitionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 size = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->size(), output);
  }

  // optional bytes hash = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->hash(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chromeos_update_engine.PartitionInfo)
}

size_t PartitionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chromeos_update_engine.PartitionInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes hash = 2;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->hash());
    }

    // optional uint64 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartitionInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PartitionInfo*>(&from));
}

void PartitionInfo::MergeFrom(const PartitionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chromeos_update_engine.PartitionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PartitionInfo::CopyFrom(const PartitionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chromeos_update_engine.PartitionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionInfo::IsInitialized() const {
  return true;
}

void PartitionInfo::Swap(PartitionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartitionInfo::InternalSwap(PartitionInfo* other) {
  using std::swap;
  hash_.Swap(&other->hash_);
  swap(size_, other->size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string PartitionInfo::GetTypeName() const {
  return "chromeos_update_engine.PartitionInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PartitionInfo

// optional uint64 size = 1;
bool PartitionInfo::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PartitionInfo::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
void PartitionInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void PartitionInfo::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
::google::protobuf::uint64 PartitionInfo::size() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.PartitionInfo.size)
  return size_;
}
void PartitionInfo::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.PartitionInfo.size)
}

// optional bytes hash = 2;
bool PartitionInfo::has_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PartitionInfo::set_has_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void PartitionInfo::clear_has_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void PartitionInfo::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
const ::std::string& PartitionInfo::hash() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.PartitionInfo.hash)
  return hash_.GetNoArena();
}
void PartitionInfo::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.PartitionInfo.hash)
}
#if LANG_CXX11
void PartitionInfo::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chromeos_update_engine.PartitionInfo.hash)
}
#endif
void PartitionInfo::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.PartitionInfo.hash)
}
void PartitionInfo::set_hash(const void* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.PartitionInfo.hash)
}
::std::string* PartitionInfo::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.PartitionInfo.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PartitionInfo::release_hash() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.PartitionInfo.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PartitionInfo::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.PartitionInfo.hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageInfo::kBoardFieldNumber;
const int ImageInfo::kKeyFieldNumber;
const int ImageInfo::kChannelFieldNumber;
const int ImageInfo::kVersionFieldNumber;
const int ImageInfo::kBuildChannelFieldNumber;
const int ImageInfo::kBuildVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageInfo::ImageInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_update_5fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chromeos_update_engine.ImageInfo)
}
ImageInfo::ImageInfo(const ImageInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  board_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_board()) {
    board_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.board_);
  }
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel()) {
    channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  build_channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_build_channel()) {
    build_channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_channel_);
  }
  build_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_build_version()) {
    build_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_version_);
  }
  // @@protoc_insertion_point(copy_constructor:chromeos_update_engine.ImageInfo)
}

void ImageInfo::SharedCtor() {
  _cached_size_ = 0;
  board_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ImageInfo::~ImageInfo() {
  // @@protoc_insertion_point(destructor:chromeos_update_engine.ImageInfo)
  SharedDtor();
}

void ImageInfo::SharedDtor() {
  board_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  build_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ImageInfo& ImageInfo::default_instance() {
  protobuf_update_5fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

ImageInfo* ImageInfo::New(::google::protobuf::Arena* arena) const {
  ImageInfo* n = new ImageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chromeos_update_engine.ImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!board_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*board_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!channel_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*channel_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*version_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!build_channel_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*build_channel_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(!build_version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*build_version_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ImageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chromeos_update_engine.ImageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string board = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_board()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string channel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string build_channel = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_build_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string build_version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_build_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chromeos_update_engine.ImageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chromeos_update_engine.ImageInfo)
  return false;
#undef DO_
}

void ImageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chromeos_update_engine.ImageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string board = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->board(), output);
  }

  // optional string key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // optional string channel = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->channel(), output);
  }

  // optional string version = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->version(), output);
  }

  // optional string build_channel = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->build_channel(), output);
  }

  // optional string build_version = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->build_version(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chromeos_update_engine.ImageInfo)
}

size_t ImageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chromeos_update_engine.ImageInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    // optional string board = 1;
    if (has_board()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->board());
    }

    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string channel = 3;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional string version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string build_channel = 5;
    if (has_build_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->build_channel());
    }

    // optional string build_version = 6;
    if (has_build_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->build_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ImageInfo*>(&from));
}

void ImageInfo::MergeFrom(const ImageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chromeos_update_engine.ImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_board();
      board_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.board_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_channel();
      channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_build_channel();
      build_channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_channel_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_build_version();
      build_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.build_version_);
    }
  }
}

void ImageInfo::CopyFrom(const ImageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chromeos_update_engine.ImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageInfo::IsInitialized() const {
  return true;
}

void ImageInfo::Swap(ImageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageInfo::InternalSwap(ImageInfo* other) {
  using std::swap;
  board_.Swap(&other->board_);
  key_.Swap(&other->key_);
  channel_.Swap(&other->channel_);
  version_.Swap(&other->version_);
  build_channel_.Swap(&other->build_channel_);
  build_version_.Swap(&other->build_version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string ImageInfo::GetTypeName() const {
  return "chromeos_update_engine.ImageInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageInfo

// optional string board = 1;
bool ImageInfo::has_board() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageInfo::set_has_board() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageInfo::clear_has_board() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageInfo::clear_board() {
  board_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_board();
}
const ::std::string& ImageInfo::board() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.ImageInfo.board)
  return board_.GetNoArena();
}
void ImageInfo::set_board(const ::std::string& value) {
  set_has_board();
  board_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.ImageInfo.board)
}
#if LANG_CXX11
void ImageInfo::set_board(::std::string&& value) {
  set_has_board();
  board_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chromeos_update_engine.ImageInfo.board)
}
#endif
void ImageInfo::set_board(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_board();
  board_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.ImageInfo.board)
}
void ImageInfo::set_board(const char* value, size_t size) {
  set_has_board();
  board_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.ImageInfo.board)
}
::std::string* ImageInfo::mutable_board() {
  set_has_board();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.ImageInfo.board)
  return board_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageInfo::release_board() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.ImageInfo.board)
  clear_has_board();
  return board_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageInfo::set_allocated_board(::std::string* board) {
  if (board != NULL) {
    set_has_board();
  } else {
    clear_has_board();
  }
  board_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), board);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.ImageInfo.board)
}

// optional string key = 2;
bool ImageInfo::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageInfo::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageInfo::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageInfo::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& ImageInfo::key() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.ImageInfo.key)
  return key_.GetNoArena();
}
void ImageInfo::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.ImageInfo.key)
}
#if LANG_CXX11
void ImageInfo::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chromeos_update_engine.ImageInfo.key)
}
#endif
void ImageInfo::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.ImageInfo.key)
}
void ImageInfo::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.ImageInfo.key)
}
::std::string* ImageInfo::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.ImageInfo.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageInfo::release_key() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.ImageInfo.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageInfo::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.ImageInfo.key)
}

// optional string channel = 3;
bool ImageInfo::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageInfo::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageInfo::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageInfo::clear_channel() {
  channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel();
}
const ::std::string& ImageInfo::channel() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.ImageInfo.channel)
  return channel_.GetNoArena();
}
void ImageInfo::set_channel(const ::std::string& value) {
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.ImageInfo.channel)
}
#if LANG_CXX11
void ImageInfo::set_channel(::std::string&& value) {
  set_has_channel();
  channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chromeos_update_engine.ImageInfo.channel)
}
#endif
void ImageInfo::set_channel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.ImageInfo.channel)
}
void ImageInfo::set_channel(const char* value, size_t size) {
  set_has_channel();
  channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.ImageInfo.channel)
}
::std::string* ImageInfo::mutable_channel() {
  set_has_channel();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.ImageInfo.channel)
  return channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageInfo::release_channel() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.ImageInfo.channel)
  clear_has_channel();
  return channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageInfo::set_allocated_channel(::std::string* channel) {
  if (channel != NULL) {
    set_has_channel();
  } else {
    clear_has_channel();
  }
  channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.ImageInfo.channel)
}

// optional string version = 4;
bool ImageInfo::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImageInfo::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
void ImageInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImageInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
const ::std::string& ImageInfo::version() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.ImageInfo.version)
  return version_.GetNoArena();
}
void ImageInfo::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.ImageInfo.version)
}
#if LANG_CXX11
void ImageInfo::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chromeos_update_engine.ImageInfo.version)
}
#endif
void ImageInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.ImageInfo.version)
}
void ImageInfo::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.ImageInfo.version)
}
::std::string* ImageInfo::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.ImageInfo.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageInfo::release_version() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.ImageInfo.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageInfo::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.ImageInfo.version)
}

// optional string build_channel = 5;
bool ImageInfo::has_build_channel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ImageInfo::set_has_build_channel() {
  _has_bits_[0] |= 0x00000010u;
}
void ImageInfo::clear_has_build_channel() {
  _has_bits_[0] &= ~0x00000010u;
}
void ImageInfo::clear_build_channel() {
  build_channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_build_channel();
}
const ::std::string& ImageInfo::build_channel() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.ImageInfo.build_channel)
  return build_channel_.GetNoArena();
}
void ImageInfo::set_build_channel(const ::std::string& value) {
  set_has_build_channel();
  build_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.ImageInfo.build_channel)
}
#if LANG_CXX11
void ImageInfo::set_build_channel(::std::string&& value) {
  set_has_build_channel();
  build_channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chromeos_update_engine.ImageInfo.build_channel)
}
#endif
void ImageInfo::set_build_channel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_build_channel();
  build_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.ImageInfo.build_channel)
}
void ImageInfo::set_build_channel(const char* value, size_t size) {
  set_has_build_channel();
  build_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.ImageInfo.build_channel)
}
::std::string* ImageInfo::mutable_build_channel() {
  set_has_build_channel();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.ImageInfo.build_channel)
  return build_channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageInfo::release_build_channel() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.ImageInfo.build_channel)
  clear_has_build_channel();
  return build_channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageInfo::set_allocated_build_channel(::std::string* build_channel) {
  if (build_channel != NULL) {
    set_has_build_channel();
  } else {
    clear_has_build_channel();
  }
  build_channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), build_channel);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.ImageInfo.build_channel)
}

// optional string build_version = 6;
bool ImageInfo::has_build_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImageInfo::set_has_build_version() {
  _has_bits_[0] |= 0x00000020u;
}
void ImageInfo::clear_has_build_version() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImageInfo::clear_build_version() {
  build_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_build_version();
}
const ::std::string& ImageInfo::build_version() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.ImageInfo.build_version)
  return build_version_.GetNoArena();
}
void ImageInfo::set_build_version(const ::std::string& value) {
  set_has_build_version();
  build_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.ImageInfo.build_version)
}
#if LANG_CXX11
void ImageInfo::set_build_version(::std::string&& value) {
  set_has_build_version();
  build_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chromeos_update_engine.ImageInfo.build_version)
}
#endif
void ImageInfo::set_build_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_build_version();
  build_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.ImageInfo.build_version)
}
void ImageInfo::set_build_version(const char* value, size_t size) {
  set_has_build_version();
  build_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.ImageInfo.build_version)
}
::std::string* ImageInfo::mutable_build_version() {
  set_has_build_version();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.ImageInfo.build_version)
  return build_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ImageInfo::release_build_version() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.ImageInfo.build_version)
  clear_has_build_version();
  return build_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ImageInfo::set_allocated_build_version(::std::string* build_version) {
  if (build_version != NULL) {
    set_has_build_version();
  } else {
    clear_has_build_version();
  }
  build_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), build_version);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.ImageInfo.build_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstallOperation::kTypeFieldNumber;
const int InstallOperation::kDataOffsetFieldNumber;
const int InstallOperation::kDataLengthFieldNumber;
const int InstallOperation::kSrcExtentsFieldNumber;
const int InstallOperation::kSrcLengthFieldNumber;
const int InstallOperation::kDstExtentsFieldNumber;
const int InstallOperation::kDstLengthFieldNumber;
const int InstallOperation::kDataSha256HashFieldNumber;
const int InstallOperation::kSrcSha256HashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstallOperation::InstallOperation()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_update_5fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chromeos_update_engine.InstallOperation)
}
InstallOperation::InstallOperation(const InstallOperation& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      src_extents_(from.src_extents_),
      dst_extents_(from.dst_extents_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_sha256_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data_sha256_hash()) {
    data_sha256_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_sha256_hash_);
  }
  src_sha256_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_src_sha256_hash()) {
    src_sha256_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_sha256_hash_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_length_) -
    reinterpret_cast<char*>(&type_)) + sizeof(data_length_));
  // @@protoc_insertion_point(copy_constructor:chromeos_update_engine.InstallOperation)
}

void InstallOperation::SharedCtor() {
  _cached_size_ = 0;
  data_sha256_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_sha256_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_length_) -
      reinterpret_cast<char*>(&type_)) + sizeof(data_length_));
}

InstallOperation::~InstallOperation() {
  // @@protoc_insertion_point(destructor:chromeos_update_engine.InstallOperation)
  SharedDtor();
}

void InstallOperation::SharedDtor() {
  data_sha256_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_sha256_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InstallOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InstallOperation& InstallOperation::default_instance() {
  protobuf_update_5fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

InstallOperation* InstallOperation::New(::google::protobuf::Arena* arena) const {
  InstallOperation* n = new InstallOperation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InstallOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:chromeos_update_engine.InstallOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  src_extents_.Clear();
  dst_extents_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!data_sha256_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_sha256_hash_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!src_sha256_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*src_sha256_hash_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_length_) -
        reinterpret_cast<char*>(&type_)) + sizeof(data_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InstallOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chromeos_update_engine.InstallOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .chromeos_update_engine.InstallOperation.Type type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chromeos_update_engine::InstallOperation_Type_IsValid(value)) {
            set_type(static_cast< ::chromeos_update_engine::InstallOperation_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_data_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_data_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chromeos_update_engine.Extent src_extents = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_src_extents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 src_length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_src_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chromeos_update_engine.Extent dst_extents = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dst_extents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 dst_length = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_dst_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data_sha256_hash = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data_sha256_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes src_sha256_hash = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src_sha256_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chromeos_update_engine.InstallOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chromeos_update_engine.InstallOperation)
  return false;
#undef DO_
}

void InstallOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chromeos_update_engine.InstallOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .chromeos_update_engine.InstallOperation.Type type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 data_offset = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->data_offset(), output);
  }

  // optional uint32 data_length = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->data_length(), output);
  }

  // repeated .chromeos_update_engine.Extent src_extents = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->src_extents_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->src_extents(static_cast<int>(i)), output);
  }

  // optional uint64 src_length = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->src_length(), output);
  }

  // repeated .chromeos_update_engine.Extent dst_extents = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dst_extents_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->dst_extents(static_cast<int>(i)), output);
  }

  // optional uint64 dst_length = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->dst_length(), output);
  }

  // optional bytes data_sha256_hash = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->data_sha256_hash(), output);
  }

  // optional bytes src_sha256_hash = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->src_sha256_hash(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chromeos_update_engine.InstallOperation)
}

size_t InstallOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chromeos_update_engine.InstallOperation)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required .chromeos_update_engine.InstallOperation.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }
  // repeated .chromeos_update_engine.Extent src_extents = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->src_extents_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src_extents(static_cast<int>(i)));
    }
  }

  // repeated .chromeos_update_engine.Extent dst_extents = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->dst_extents_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dst_extents(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes data_sha256_hash = 8;
    if (has_data_sha256_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data_sha256_hash());
    }

    // optional bytes src_sha256_hash = 9;
    if (has_src_sha256_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src_sha256_hash());
    }

  }
  if (_has_bits_[0 / 32] & 120u) {
    // optional uint32 data_offset = 2;
    if (has_data_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_offset());
    }

    // optional uint64 src_length = 5;
    if (has_src_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src_length());
    }

    // optional uint64 dst_length = 7;
    if (has_dst_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dst_length());
    }

    // optional uint32 data_length = 3;
    if (has_data_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_length());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstallOperation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InstallOperation*>(&from));
}

void InstallOperation::MergeFrom(const InstallOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chromeos_update_engine.InstallOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  src_extents_.MergeFrom(from.src_extents_);
  dst_extents_.MergeFrom(from.dst_extents_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data_sha256_hash();
      data_sha256_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_sha256_hash_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_src_sha256_hash();
      src_sha256_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_sha256_hash_);
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      data_offset_ = from.data_offset_;
    }
    if (cached_has_bits & 0x00000010u) {
      src_length_ = from.src_length_;
    }
    if (cached_has_bits & 0x00000020u) {
      dst_length_ = from.dst_length_;
    }
    if (cached_has_bits & 0x00000040u) {
      data_length_ = from.data_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InstallOperation::CopyFrom(const InstallOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chromeos_update_engine.InstallOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallOperation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  return true;
}

void InstallOperation::Swap(InstallOperation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstallOperation::InternalSwap(InstallOperation* other) {
  using std::swap;
  src_extents_.InternalSwap(&other->src_extents_);
  dst_extents_.InternalSwap(&other->dst_extents_);
  data_sha256_hash_.Swap(&other->data_sha256_hash_);
  src_sha256_hash_.Swap(&other->src_sha256_hash_);
  swap(type_, other->type_);
  swap(data_offset_, other->data_offset_);
  swap(src_length_, other->src_length_);
  swap(dst_length_, other->dst_length_);
  swap(data_length_, other->data_length_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string InstallOperation::GetTypeName() const {
  return "chromeos_update_engine.InstallOperation";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InstallOperation

// required .chromeos_update_engine.InstallOperation.Type type = 1;
bool InstallOperation::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InstallOperation::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void InstallOperation::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void InstallOperation::clear_type() {
  type_ = 0;
  clear_has_type();
}
::chromeos_update_engine::InstallOperation_Type InstallOperation::type() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.InstallOperation.type)
  return static_cast< ::chromeos_update_engine::InstallOperation_Type >(type_);
}
void InstallOperation::set_type(::chromeos_update_engine::InstallOperation_Type value) {
  assert(::chromeos_update_engine::InstallOperation_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.InstallOperation.type)
}

// optional uint32 data_offset = 2;
bool InstallOperation::has_data_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InstallOperation::set_has_data_offset() {
  _has_bits_[0] |= 0x00000008u;
}
void InstallOperation::clear_has_data_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
void InstallOperation::clear_data_offset() {
  data_offset_ = 0u;
  clear_has_data_offset();
}
::google::protobuf::uint32 InstallOperation::data_offset() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.InstallOperation.data_offset)
  return data_offset_;
}
void InstallOperation::set_data_offset(::google::protobuf::uint32 value) {
  set_has_data_offset();
  data_offset_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.InstallOperation.data_offset)
}

// optional uint32 data_length = 3;
bool InstallOperation::has_data_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void InstallOperation::set_has_data_length() {
  _has_bits_[0] |= 0x00000040u;
}
void InstallOperation::clear_has_data_length() {
  _has_bits_[0] &= ~0x00000040u;
}
void InstallOperation::clear_data_length() {
  data_length_ = 0u;
  clear_has_data_length();
}
::google::protobuf::uint32 InstallOperation::data_length() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.InstallOperation.data_length)
  return data_length_;
}
void InstallOperation::set_data_length(::google::protobuf::uint32 value) {
  set_has_data_length();
  data_length_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.InstallOperation.data_length)
}

// repeated .chromeos_update_engine.Extent src_extents = 4;
int InstallOperation::src_extents_size() const {
  return src_extents_.size();
}
void InstallOperation::clear_src_extents() {
  src_extents_.Clear();
}
const ::chromeos_update_engine::Extent& InstallOperation::src_extents(int index) const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.InstallOperation.src_extents)
  return src_extents_.Get(index);
}
::chromeos_update_engine::Extent* InstallOperation::mutable_src_extents(int index) {
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.InstallOperation.src_extents)
  return src_extents_.Mutable(index);
}
::chromeos_update_engine::Extent* InstallOperation::add_src_extents() {
  // @@protoc_insertion_point(field_add:chromeos_update_engine.InstallOperation.src_extents)
  return src_extents_.Add();
}
::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::Extent >*
InstallOperation::mutable_src_extents() {
  // @@protoc_insertion_point(field_mutable_list:chromeos_update_engine.InstallOperation.src_extents)
  return &src_extents_;
}
const ::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::Extent >&
InstallOperation::src_extents() const {
  // @@protoc_insertion_point(field_list:chromeos_update_engine.InstallOperation.src_extents)
  return src_extents_;
}

// optional uint64 src_length = 5;
bool InstallOperation::has_src_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void InstallOperation::set_has_src_length() {
  _has_bits_[0] |= 0x00000010u;
}
void InstallOperation::clear_has_src_length() {
  _has_bits_[0] &= ~0x00000010u;
}
void InstallOperation::clear_src_length() {
  src_length_ = GOOGLE_ULONGLONG(0);
  clear_has_src_length();
}
::google::protobuf::uint64 InstallOperation::src_length() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.InstallOperation.src_length)
  return src_length_;
}
void InstallOperation::set_src_length(::google::protobuf::uint64 value) {
  set_has_src_length();
  src_length_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.InstallOperation.src_length)
}

// repeated .chromeos_update_engine.Extent dst_extents = 6;
int InstallOperation::dst_extents_size() const {
  return dst_extents_.size();
}
void InstallOperation::clear_dst_extents() {
  dst_extents_.Clear();
}
const ::chromeos_update_engine::Extent& InstallOperation::dst_extents(int index) const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.InstallOperation.dst_extents)
  return dst_extents_.Get(index);
}
::chromeos_update_engine::Extent* InstallOperation::mutable_dst_extents(int index) {
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.InstallOperation.dst_extents)
  return dst_extents_.Mutable(index);
}
::chromeos_update_engine::Extent* InstallOperation::add_dst_extents() {
  // @@protoc_insertion_point(field_add:chromeos_update_engine.InstallOperation.dst_extents)
  return dst_extents_.Add();
}
::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::Extent >*
InstallOperation::mutable_dst_extents() {
  // @@protoc_insertion_point(field_mutable_list:chromeos_update_engine.InstallOperation.dst_extents)
  return &dst_extents_;
}
const ::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::Extent >&
InstallOperation::dst_extents() const {
  // @@protoc_insertion_point(field_list:chromeos_update_engine.InstallOperation.dst_extents)
  return dst_extents_;
}

// optional uint64 dst_length = 7;
bool InstallOperation::has_dst_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void InstallOperation::set_has_dst_length() {
  _has_bits_[0] |= 0x00000020u;
}
void InstallOperation::clear_has_dst_length() {
  _has_bits_[0] &= ~0x00000020u;
}
void InstallOperation::clear_dst_length() {
  dst_length_ = GOOGLE_ULONGLONG(0);
  clear_has_dst_length();
}
::google::protobuf::uint64 InstallOperation::dst_length() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.InstallOperation.dst_length)
  return dst_length_;
}
void InstallOperation::set_dst_length(::google::protobuf::uint64 value) {
  set_has_dst_length();
  dst_length_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.InstallOperation.dst_length)
}

// optional bytes data_sha256_hash = 8;
bool InstallOperation::has_data_sha256_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InstallOperation::set_has_data_sha256_hash() {
  _has_bits_[0] |= 0x00000001u;
}
void InstallOperation::clear_has_data_sha256_hash() {
  _has_bits_[0] &= ~0x00000001u;
}
void InstallOperation::clear_data_sha256_hash() {
  data_sha256_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_sha256_hash();
}
const ::std::string& InstallOperation::data_sha256_hash() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.InstallOperation.data_sha256_hash)
  return data_sha256_hash_.GetNoArena();
}
void InstallOperation::set_data_sha256_hash(const ::std::string& value) {
  set_has_data_sha256_hash();
  data_sha256_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.InstallOperation.data_sha256_hash)
}
#if LANG_CXX11
void InstallOperation::set_data_sha256_hash(::std::string&& value) {
  set_has_data_sha256_hash();
  data_sha256_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chromeos_update_engine.InstallOperation.data_sha256_hash)
}
#endif
void InstallOperation::set_data_sha256_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data_sha256_hash();
  data_sha256_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.InstallOperation.data_sha256_hash)
}
void InstallOperation::set_data_sha256_hash(const void* value, size_t size) {
  set_has_data_sha256_hash();
  data_sha256_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.InstallOperation.data_sha256_hash)
}
::std::string* InstallOperation::mutable_data_sha256_hash() {
  set_has_data_sha256_hash();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.InstallOperation.data_sha256_hash)
  return data_sha256_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InstallOperation::release_data_sha256_hash() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.InstallOperation.data_sha256_hash)
  clear_has_data_sha256_hash();
  return data_sha256_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InstallOperation::set_allocated_data_sha256_hash(::std::string* data_sha256_hash) {
  if (data_sha256_hash != NULL) {
    set_has_data_sha256_hash();
  } else {
    clear_has_data_sha256_hash();
  }
  data_sha256_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_sha256_hash);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.InstallOperation.data_sha256_hash)
}

// optional bytes src_sha256_hash = 9;
bool InstallOperation::has_src_sha256_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InstallOperation::set_has_src_sha256_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void InstallOperation::clear_has_src_sha256_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void InstallOperation::clear_src_sha256_hash() {
  src_sha256_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_src_sha256_hash();
}
const ::std::string& InstallOperation::src_sha256_hash() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.InstallOperation.src_sha256_hash)
  return src_sha256_hash_.GetNoArena();
}
void InstallOperation::set_src_sha256_hash(const ::std::string& value) {
  set_has_src_sha256_hash();
  src_sha256_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.InstallOperation.src_sha256_hash)
}
#if LANG_CXX11
void InstallOperation::set_src_sha256_hash(::std::string&& value) {
  set_has_src_sha256_hash();
  src_sha256_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chromeos_update_engine.InstallOperation.src_sha256_hash)
}
#endif
void InstallOperation::set_src_sha256_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_src_sha256_hash();
  src_sha256_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.InstallOperation.src_sha256_hash)
}
void InstallOperation::set_src_sha256_hash(const void* value, size_t size) {
  set_has_src_sha256_hash();
  src_sha256_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.InstallOperation.src_sha256_hash)
}
::std::string* InstallOperation::mutable_src_sha256_hash() {
  set_has_src_sha256_hash();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.InstallOperation.src_sha256_hash)
  return src_sha256_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InstallOperation::release_src_sha256_hash() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.InstallOperation.src_sha256_hash)
  clear_has_src_sha256_hash();
  return src_sha256_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InstallOperation::set_allocated_src_sha256_hash(::std::string* src_sha256_hash) {
  if (src_sha256_hash != NULL) {
    set_has_src_sha256_hash();
  } else {
    clear_has_src_sha256_hash();
  }
  src_sha256_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_sha256_hash);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.InstallOperation.src_sha256_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartitionUpdate::kPartitionNameFieldNumber;
const int PartitionUpdate::kRunPostinstallFieldNumber;
const int PartitionUpdate::kPostinstallPathFieldNumber;
const int PartitionUpdate::kFilesystemTypeFieldNumber;
const int PartitionUpdate::kNewPartitionSignatureFieldNumber;
const int PartitionUpdate::kOldPartitionInfoFieldNumber;
const int PartitionUpdate::kNewPartitionInfoFieldNumber;
const int PartitionUpdate::kOperationsFieldNumber;
const int PartitionUpdate::kPostinstallOptionalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartitionUpdate::PartitionUpdate()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_update_5fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chromeos_update_engine.PartitionUpdate)
}
PartitionUpdate::PartitionUpdate(const PartitionUpdate& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      new_partition_signature_(from.new_partition_signature_),
      operations_(from.operations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  partition_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_partition_name()) {
    partition_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partition_name_);
  }
  postinstall_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_postinstall_path()) {
    postinstall_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.postinstall_path_);
  }
  filesystem_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filesystem_type()) {
    filesystem_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filesystem_type_);
  }
  if (from.has_old_partition_info()) {
    old_partition_info_ = new ::chromeos_update_engine::PartitionInfo(*from.old_partition_info_);
  } else {
    old_partition_info_ = NULL;
  }
  if (from.has_new_partition_info()) {
    new_partition_info_ = new ::chromeos_update_engine::PartitionInfo(*from.new_partition_info_);
  } else {
    new_partition_info_ = NULL;
  }
  ::memcpy(&run_postinstall_, &from.run_postinstall_,
    static_cast<size_t>(reinterpret_cast<char*>(&postinstall_optional_) -
    reinterpret_cast<char*>(&run_postinstall_)) + sizeof(postinstall_optional_));
  // @@protoc_insertion_point(copy_constructor:chromeos_update_engine.PartitionUpdate)
}

void PartitionUpdate::SharedCtor() {
  _cached_size_ = 0;
  partition_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postinstall_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filesystem_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&old_partition_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&postinstall_optional_) -
      reinterpret_cast<char*>(&old_partition_info_)) + sizeof(postinstall_optional_));
}

PartitionUpdate::~PartitionUpdate() {
  // @@protoc_insertion_point(destructor:chromeos_update_engine.PartitionUpdate)
  SharedDtor();
}

void PartitionUpdate::SharedDtor() {
  partition_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  postinstall_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filesystem_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete old_partition_info_;
  if (this != internal_default_instance()) delete new_partition_info_;
}

void PartitionUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PartitionUpdate& PartitionUpdate::default_instance() {
  protobuf_update_5fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PartitionUpdate* PartitionUpdate::New(::google::protobuf::Arena* arena) const {
  PartitionUpdate* n = new PartitionUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PartitionUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:chromeos_update_engine.PartitionUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_partition_signature_.Clear();
  operations_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!partition_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*partition_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!postinstall_path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*postinstall_path_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!filesystem_type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filesystem_type_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(old_partition_info_ != NULL);
      old_partition_info_->::chromeos_update_engine::PartitionInfo::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(new_partition_info_ != NULL);
      new_partition_info_->::chromeos_update_engine::PartitionInfo::Clear();
    }
  }
  if (cached_has_bits & 96u) {
    ::memset(&run_postinstall_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&postinstall_optional_) -
        reinterpret_cast<char*>(&run_postinstall_)) + sizeof(postinstall_optional_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PartitionUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chromeos_update_engine.PartitionUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string partition_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_partition_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool run_postinstall = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_run_postinstall();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &run_postinstall_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string postinstall_path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postinstall_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filesystem_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filesystem_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chromeos_update_engine.Signatures.Signature new_partition_signature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_new_partition_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chromeos_update_engine.PartitionInfo old_partition_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_partition_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chromeos_update_engine.PartitionInfo new_partition_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_partition_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chromeos_update_engine.InstallOperation operations = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool postinstall_optional = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_postinstall_optional();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &postinstall_optional_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chromeos_update_engine.PartitionUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chromeos_update_engine.PartitionUpdate)
  return false;
#undef DO_
}

void PartitionUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chromeos_update_engine.PartitionUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string partition_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->partition_name(), output);
  }

  // optional bool run_postinstall = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->run_postinstall(), output);
  }

  // optional string postinstall_path = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->postinstall_path(), output);
  }

  // optional string filesystem_type = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filesystem_type(), output);
  }

  // repeated .chromeos_update_engine.Signatures.Signature new_partition_signature = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->new_partition_signature_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->new_partition_signature(static_cast<int>(i)), output);
  }

  // optional .chromeos_update_engine.PartitionInfo old_partition_info = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->old_partition_info_, output);
  }

  // optional .chromeos_update_engine.PartitionInfo new_partition_info = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->new_partition_info_, output);
  }

  // repeated .chromeos_update_engine.InstallOperation operations = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->operations(static_cast<int>(i)), output);
  }

  // optional bool postinstall_optional = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->postinstall_optional(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chromeos_update_engine.PartitionUpdate)
}

size_t PartitionUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chromeos_update_engine.PartitionUpdate)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required string partition_name = 1;
  if (has_partition_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->partition_name());
  }
  // repeated .chromeos_update_engine.Signatures.Signature new_partition_signature = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->new_partition_signature_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_partition_signature(static_cast<int>(i)));
    }
  }

  // repeated .chromeos_update_engine.InstallOperation operations = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->operations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operations(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 126u) {
    // optional string postinstall_path = 3;
    if (has_postinstall_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postinstall_path());
    }

    // optional string filesystem_type = 4;
    if (has_filesystem_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filesystem_type());
    }

    // optional .chromeos_update_engine.PartitionInfo old_partition_info = 6;
    if (has_old_partition_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->old_partition_info_);
    }

    // optional .chromeos_update_engine.PartitionInfo new_partition_info = 7;
    if (has_new_partition_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->new_partition_info_);
    }

    // optional bool run_postinstall = 2;
    if (has_run_postinstall()) {
      total_size += 1 + 1;
    }

    // optional bool postinstall_optional = 9;
    if (has_postinstall_optional()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartitionUpdate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PartitionUpdate*>(&from));
}

void PartitionUpdate::MergeFrom(const PartitionUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chromeos_update_engine.PartitionUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  new_partition_signature_.MergeFrom(from.new_partition_signature_);
  operations_.MergeFrom(from.operations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_partition_name();
      partition_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.partition_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_postinstall_path();
      postinstall_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.postinstall_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_filesystem_type();
      filesystem_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filesystem_type_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_old_partition_info()->::chromeos_update_engine::PartitionInfo::MergeFrom(from.old_partition_info());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_new_partition_info()->::chromeos_update_engine::PartitionInfo::MergeFrom(from.new_partition_info());
    }
    if (cached_has_bits & 0x00000020u) {
      run_postinstall_ = from.run_postinstall_;
    }
    if (cached_has_bits & 0x00000040u) {
      postinstall_optional_ = from.postinstall_optional_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PartitionUpdate::CopyFrom(const PartitionUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chromeos_update_engine.PartitionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->operations())) return false;
  return true;
}

void PartitionUpdate::Swap(PartitionUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartitionUpdate::InternalSwap(PartitionUpdate* other) {
  using std::swap;
  new_partition_signature_.InternalSwap(&other->new_partition_signature_);
  operations_.InternalSwap(&other->operations_);
  partition_name_.Swap(&other->partition_name_);
  postinstall_path_.Swap(&other->postinstall_path_);
  filesystem_type_.Swap(&other->filesystem_type_);
  swap(old_partition_info_, other->old_partition_info_);
  swap(new_partition_info_, other->new_partition_info_);
  swap(run_postinstall_, other->run_postinstall_);
  swap(postinstall_optional_, other->postinstall_optional_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string PartitionUpdate::GetTypeName() const {
  return "chromeos_update_engine.PartitionUpdate";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PartitionUpdate

// required string partition_name = 1;
bool PartitionUpdate::has_partition_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PartitionUpdate::set_has_partition_name() {
  _has_bits_[0] |= 0x00000001u;
}
void PartitionUpdate::clear_has_partition_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void PartitionUpdate::clear_partition_name() {
  partition_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_partition_name();
}
const ::std::string& PartitionUpdate::partition_name() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.PartitionUpdate.partition_name)
  return partition_name_.GetNoArena();
}
void PartitionUpdate::set_partition_name(const ::std::string& value) {
  set_has_partition_name();
  partition_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.PartitionUpdate.partition_name)
}
#if LANG_CXX11
void PartitionUpdate::set_partition_name(::std::string&& value) {
  set_has_partition_name();
  partition_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chromeos_update_engine.PartitionUpdate.partition_name)
}
#endif
void PartitionUpdate::set_partition_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_partition_name();
  partition_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.PartitionUpdate.partition_name)
}
void PartitionUpdate::set_partition_name(const char* value, size_t size) {
  set_has_partition_name();
  partition_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.PartitionUpdate.partition_name)
}
::std::string* PartitionUpdate::mutable_partition_name() {
  set_has_partition_name();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.PartitionUpdate.partition_name)
  return partition_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PartitionUpdate::release_partition_name() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.PartitionUpdate.partition_name)
  clear_has_partition_name();
  return partition_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PartitionUpdate::set_allocated_partition_name(::std::string* partition_name) {
  if (partition_name != NULL) {
    set_has_partition_name();
  } else {
    clear_has_partition_name();
  }
  partition_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partition_name);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.PartitionUpdate.partition_name)
}

// optional bool run_postinstall = 2;
bool PartitionUpdate::has_run_postinstall() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PartitionUpdate::set_has_run_postinstall() {
  _has_bits_[0] |= 0x00000020u;
}
void PartitionUpdate::clear_has_run_postinstall() {
  _has_bits_[0] &= ~0x00000020u;
}
void PartitionUpdate::clear_run_postinstall() {
  run_postinstall_ = false;
  clear_has_run_postinstall();
}
bool PartitionUpdate::run_postinstall() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.PartitionUpdate.run_postinstall)
  return run_postinstall_;
}
void PartitionUpdate::set_run_postinstall(bool value) {
  set_has_run_postinstall();
  run_postinstall_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.PartitionUpdate.run_postinstall)
}

// optional string postinstall_path = 3;
bool PartitionUpdate::has_postinstall_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PartitionUpdate::set_has_postinstall_path() {
  _has_bits_[0] |= 0x00000002u;
}
void PartitionUpdate::clear_has_postinstall_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void PartitionUpdate::clear_postinstall_path() {
  postinstall_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_postinstall_path();
}
const ::std::string& PartitionUpdate::postinstall_path() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.PartitionUpdate.postinstall_path)
  return postinstall_path_.GetNoArena();
}
void PartitionUpdate::set_postinstall_path(const ::std::string& value) {
  set_has_postinstall_path();
  postinstall_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.PartitionUpdate.postinstall_path)
}
#if LANG_CXX11
void PartitionUpdate::set_postinstall_path(::std::string&& value) {
  set_has_postinstall_path();
  postinstall_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chromeos_update_engine.PartitionUpdate.postinstall_path)
}
#endif
void PartitionUpdate::set_postinstall_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_postinstall_path();
  postinstall_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.PartitionUpdate.postinstall_path)
}
void PartitionUpdate::set_postinstall_path(const char* value, size_t size) {
  set_has_postinstall_path();
  postinstall_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.PartitionUpdate.postinstall_path)
}
::std::string* PartitionUpdate::mutable_postinstall_path() {
  set_has_postinstall_path();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.PartitionUpdate.postinstall_path)
  return postinstall_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PartitionUpdate::release_postinstall_path() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.PartitionUpdate.postinstall_path)
  clear_has_postinstall_path();
  return postinstall_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PartitionUpdate::set_allocated_postinstall_path(::std::string* postinstall_path) {
  if (postinstall_path != NULL) {
    set_has_postinstall_path();
  } else {
    clear_has_postinstall_path();
  }
  postinstall_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), postinstall_path);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.PartitionUpdate.postinstall_path)
}

// optional string filesystem_type = 4;
bool PartitionUpdate::has_filesystem_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PartitionUpdate::set_has_filesystem_type() {
  _has_bits_[0] |= 0x00000004u;
}
void PartitionUpdate::clear_has_filesystem_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void PartitionUpdate::clear_filesystem_type() {
  filesystem_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filesystem_type();
}
const ::std::string& PartitionUpdate::filesystem_type() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.PartitionUpdate.filesystem_type)
  return filesystem_type_.GetNoArena();
}
void PartitionUpdate::set_filesystem_type(const ::std::string& value) {
  set_has_filesystem_type();
  filesystem_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chromeos_update_engine.PartitionUpdate.filesystem_type)
}
#if LANG_CXX11
void PartitionUpdate::set_filesystem_type(::std::string&& value) {
  set_has_filesystem_type();
  filesystem_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chromeos_update_engine.PartitionUpdate.filesystem_type)
}
#endif
void PartitionUpdate::set_filesystem_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filesystem_type();
  filesystem_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chromeos_update_engine.PartitionUpdate.filesystem_type)
}
void PartitionUpdate::set_filesystem_type(const char* value, size_t size) {
  set_has_filesystem_type();
  filesystem_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chromeos_update_engine.PartitionUpdate.filesystem_type)
}
::std::string* PartitionUpdate::mutable_filesystem_type() {
  set_has_filesystem_type();
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.PartitionUpdate.filesystem_type)
  return filesystem_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PartitionUpdate::release_filesystem_type() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.PartitionUpdate.filesystem_type)
  clear_has_filesystem_type();
  return filesystem_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PartitionUpdate::set_allocated_filesystem_type(::std::string* filesystem_type) {
  if (filesystem_type != NULL) {
    set_has_filesystem_type();
  } else {
    clear_has_filesystem_type();
  }
  filesystem_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filesystem_type);
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.PartitionUpdate.filesystem_type)
}

// repeated .chromeos_update_engine.Signatures.Signature new_partition_signature = 5;
int PartitionUpdate::new_partition_signature_size() const {
  return new_partition_signature_.size();
}
void PartitionUpdate::clear_new_partition_signature() {
  new_partition_signature_.Clear();
}
const ::chromeos_update_engine::Signatures_Signature& PartitionUpdate::new_partition_signature(int index) const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.PartitionUpdate.new_partition_signature)
  return new_partition_signature_.Get(index);
}
::chromeos_update_engine::Signatures_Signature* PartitionUpdate::mutable_new_partition_signature(int index) {
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.PartitionUpdate.new_partition_signature)
  return new_partition_signature_.Mutable(index);
}
::chromeos_update_engine::Signatures_Signature* PartitionUpdate::add_new_partition_signature() {
  // @@protoc_insertion_point(field_add:chromeos_update_engine.PartitionUpdate.new_partition_signature)
  return new_partition_signature_.Add();
}
::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::Signatures_Signature >*
PartitionUpdate::mutable_new_partition_signature() {
  // @@protoc_insertion_point(field_mutable_list:chromeos_update_engine.PartitionUpdate.new_partition_signature)
  return &new_partition_signature_;
}
const ::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::Signatures_Signature >&
PartitionUpdate::new_partition_signature() const {
  // @@protoc_insertion_point(field_list:chromeos_update_engine.PartitionUpdate.new_partition_signature)
  return new_partition_signature_;
}

// optional .chromeos_update_engine.PartitionInfo old_partition_info = 6;
bool PartitionUpdate::has_old_partition_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PartitionUpdate::set_has_old_partition_info() {
  _has_bits_[0] |= 0x00000008u;
}
void PartitionUpdate::clear_has_old_partition_info() {
  _has_bits_[0] &= ~0x00000008u;
}
void PartitionUpdate::clear_old_partition_info() {
  if (old_partition_info_ != NULL) old_partition_info_->::chromeos_update_engine::PartitionInfo::Clear();
  clear_has_old_partition_info();
}
const ::chromeos_update_engine::PartitionInfo& PartitionUpdate::old_partition_info() const {
  const ::chromeos_update_engine::PartitionInfo* p = old_partition_info_;
  // @@protoc_insertion_point(field_get:chromeos_update_engine.PartitionUpdate.old_partition_info)
  return p != NULL ? *p : *reinterpret_cast<const ::chromeos_update_engine::PartitionInfo*>(
      &::chromeos_update_engine::_PartitionInfo_default_instance_);
}
::chromeos_update_engine::PartitionInfo* PartitionUpdate::mutable_old_partition_info() {
  set_has_old_partition_info();
  if (old_partition_info_ == NULL) {
    old_partition_info_ = new ::chromeos_update_engine::PartitionInfo;
  }
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.PartitionUpdate.old_partition_info)
  return old_partition_info_;
}
::chromeos_update_engine::PartitionInfo* PartitionUpdate::release_old_partition_info() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.PartitionUpdate.old_partition_info)
  clear_has_old_partition_info();
  ::chromeos_update_engine::PartitionInfo* temp = old_partition_info_;
  old_partition_info_ = NULL;
  return temp;
}
void PartitionUpdate::set_allocated_old_partition_info(::chromeos_update_engine::PartitionInfo* old_partition_info) {
  delete old_partition_info_;
  old_partition_info_ = old_partition_info;
  if (old_partition_info) {
    set_has_old_partition_info();
  } else {
    clear_has_old_partition_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.PartitionUpdate.old_partition_info)
}

// optional .chromeos_update_engine.PartitionInfo new_partition_info = 7;
bool PartitionUpdate::has_new_partition_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PartitionUpdate::set_has_new_partition_info() {
  _has_bits_[0] |= 0x00000010u;
}
void PartitionUpdate::clear_has_new_partition_info() {
  _has_bits_[0] &= ~0x00000010u;
}
void PartitionUpdate::clear_new_partition_info() {
  if (new_partition_info_ != NULL) new_partition_info_->::chromeos_update_engine::PartitionInfo::Clear();
  clear_has_new_partition_info();
}
const ::chromeos_update_engine::PartitionInfo& PartitionUpdate::new_partition_info() const {
  const ::chromeos_update_engine::PartitionInfo* p = new_partition_info_;
  // @@protoc_insertion_point(field_get:chromeos_update_engine.PartitionUpdate.new_partition_info)
  return p != NULL ? *p : *reinterpret_cast<const ::chromeos_update_engine::PartitionInfo*>(
      &::chromeos_update_engine::_PartitionInfo_default_instance_);
}
::chromeos_update_engine::PartitionInfo* PartitionUpdate::mutable_new_partition_info() {
  set_has_new_partition_info();
  if (new_partition_info_ == NULL) {
    new_partition_info_ = new ::chromeos_update_engine::PartitionInfo;
  }
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.PartitionUpdate.new_partition_info)
  return new_partition_info_;
}
::chromeos_update_engine::PartitionInfo* PartitionUpdate::release_new_partition_info() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.PartitionUpdate.new_partition_info)
  clear_has_new_partition_info();
  ::chromeos_update_engine::PartitionInfo* temp = new_partition_info_;
  new_partition_info_ = NULL;
  return temp;
}
void PartitionUpdate::set_allocated_new_partition_info(::chromeos_update_engine::PartitionInfo* new_partition_info) {
  delete new_partition_info_;
  new_partition_info_ = new_partition_info;
  if (new_partition_info) {
    set_has_new_partition_info();
  } else {
    clear_has_new_partition_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.PartitionUpdate.new_partition_info)
}

// repeated .chromeos_update_engine.InstallOperation operations = 8;
int PartitionUpdate::operations_size() const {
  return operations_.size();
}
void PartitionUpdate::clear_operations() {
  operations_.Clear();
}
const ::chromeos_update_engine::InstallOperation& PartitionUpdate::operations(int index) const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.PartitionUpdate.operations)
  return operations_.Get(index);
}
::chromeos_update_engine::InstallOperation* PartitionUpdate::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.PartitionUpdate.operations)
  return operations_.Mutable(index);
}
::chromeos_update_engine::InstallOperation* PartitionUpdate::add_operations() {
  // @@protoc_insertion_point(field_add:chromeos_update_engine.PartitionUpdate.operations)
  return operations_.Add();
}
::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::InstallOperation >*
PartitionUpdate::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:chromeos_update_engine.PartitionUpdate.operations)
  return &operations_;
}
const ::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::InstallOperation >&
PartitionUpdate::operations() const {
  // @@protoc_insertion_point(field_list:chromeos_update_engine.PartitionUpdate.operations)
  return operations_;
}

// optional bool postinstall_optional = 9;
bool PartitionUpdate::has_postinstall_optional() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PartitionUpdate::set_has_postinstall_optional() {
  _has_bits_[0] |= 0x00000040u;
}
void PartitionUpdate::clear_has_postinstall_optional() {
  _has_bits_[0] &= ~0x00000040u;
}
void PartitionUpdate::clear_postinstall_optional() {
  postinstall_optional_ = false;
  clear_has_postinstall_optional();
}
bool PartitionUpdate::postinstall_optional() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.PartitionUpdate.postinstall_optional)
  return postinstall_optional_;
}
void PartitionUpdate::set_postinstall_optional(bool value) {
  set_has_postinstall_optional();
  postinstall_optional_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.PartitionUpdate.postinstall_optional)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeltaArchiveManifest::kInstallOperationsFieldNumber;
const int DeltaArchiveManifest::kKernelInstallOperationsFieldNumber;
const int DeltaArchiveManifest::kBlockSizeFieldNumber;
const int DeltaArchiveManifest::kSignaturesOffsetFieldNumber;
const int DeltaArchiveManifest::kSignaturesSizeFieldNumber;
const int DeltaArchiveManifest::kOldKernelInfoFieldNumber;
const int DeltaArchiveManifest::kNewKernelInfoFieldNumber;
const int DeltaArchiveManifest::kOldRootfsInfoFieldNumber;
const int DeltaArchiveManifest::kNewRootfsInfoFieldNumber;
const int DeltaArchiveManifest::kOldImageInfoFieldNumber;
const int DeltaArchiveManifest::kNewImageInfoFieldNumber;
const int DeltaArchiveManifest::kMinorVersionFieldNumber;
const int DeltaArchiveManifest::kPartitionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeltaArchiveManifest::DeltaArchiveManifest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_update_5fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:chromeos_update_engine.DeltaArchiveManifest)
}
DeltaArchiveManifest::DeltaArchiveManifest(const DeltaArchiveManifest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      install_operations_(from.install_operations_),
      kernel_install_operations_(from.kernel_install_operations_),
      partitions_(from.partitions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_old_kernel_info()) {
    old_kernel_info_ = new ::chromeos_update_engine::PartitionInfo(*from.old_kernel_info_);
  } else {
    old_kernel_info_ = NULL;
  }
  if (from.has_new_kernel_info()) {
    new_kernel_info_ = new ::chromeos_update_engine::PartitionInfo(*from.new_kernel_info_);
  } else {
    new_kernel_info_ = NULL;
  }
  if (from.has_old_rootfs_info()) {
    old_rootfs_info_ = new ::chromeos_update_engine::PartitionInfo(*from.old_rootfs_info_);
  } else {
    old_rootfs_info_ = NULL;
  }
  if (from.has_new_rootfs_info()) {
    new_rootfs_info_ = new ::chromeos_update_engine::PartitionInfo(*from.new_rootfs_info_);
  } else {
    new_rootfs_info_ = NULL;
  }
  if (from.has_old_image_info()) {
    old_image_info_ = new ::chromeos_update_engine::ImageInfo(*from.old_image_info_);
  } else {
    old_image_info_ = NULL;
  }
  if (from.has_new_image_info()) {
    new_image_info_ = new ::chromeos_update_engine::ImageInfo(*from.new_image_info_);
  } else {
    new_image_info_ = NULL;
  }
  ::memcpy(&signatures_offset_, &from.signatures_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_size_) -
    reinterpret_cast<char*>(&signatures_offset_)) + sizeof(block_size_));
  // @@protoc_insertion_point(copy_constructor:chromeos_update_engine.DeltaArchiveManifest)
}

void DeltaArchiveManifest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&old_kernel_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minor_version_) -
      reinterpret_cast<char*>(&old_kernel_info_)) + sizeof(minor_version_));
  block_size_ = 4096u;
}

DeltaArchiveManifest::~DeltaArchiveManifest() {
  // @@protoc_insertion_point(destructor:chromeos_update_engine.DeltaArchiveManifest)
  SharedDtor();
}

void DeltaArchiveManifest::SharedDtor() {
  if (this != internal_default_instance()) delete old_kernel_info_;
  if (this != internal_default_instance()) delete new_kernel_info_;
  if (this != internal_default_instance()) delete old_rootfs_info_;
  if (this != internal_default_instance()) delete new_rootfs_info_;
  if (this != internal_default_instance()) delete old_image_info_;
  if (this != internal_default_instance()) delete new_image_info_;
}

void DeltaArchiveManifest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DeltaArchiveManifest& DeltaArchiveManifest::default_instance() {
  protobuf_update_5fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeltaArchiveManifest* DeltaArchiveManifest::New(::google::protobuf::Arena* arena) const {
  DeltaArchiveManifest* n = new DeltaArchiveManifest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeltaArchiveManifest::Clear() {
// @@protoc_insertion_point(message_clear_start:chromeos_update_engine.DeltaArchiveManifest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  install_operations_.Clear();
  kernel_install_operations_.Clear();
  partitions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(old_kernel_info_ != NULL);
      old_kernel_info_->::chromeos_update_engine::PartitionInfo::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(new_kernel_info_ != NULL);
      new_kernel_info_->::chromeos_update_engine::PartitionInfo::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(old_rootfs_info_ != NULL);
      old_rootfs_info_->::chromeos_update_engine::PartitionInfo::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(new_rootfs_info_ != NULL);
      new_rootfs_info_->::chromeos_update_engine::PartitionInfo::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(old_image_info_ != NULL);
      old_image_info_->::chromeos_update_engine::ImageInfo::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(new_image_info_ != NULL);
      new_image_info_->::chromeos_update_engine::ImageInfo::Clear();
    }
  }
  if (cached_has_bits & 192u) {
    ::memset(&signatures_offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&signatures_size_) -
        reinterpret_cast<char*>(&signatures_offset_)) + sizeof(signatures_size_));
  }
  if (cached_has_bits & 768u) {
    minor_version_ = 0u;
    block_size_ = 4096u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeltaArchiveManifest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chromeos_update_engine.DeltaArchiveManifest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chromeos_update_engine.InstallOperation install_operations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_install_operations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chromeos_update_engine.InstallOperation kernel_install_operations = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kernel_install_operations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 block_size = 3 [default = 4096];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_block_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &block_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 signatures_offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_signatures_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signatures_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 signatures_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_signatures_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signatures_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chromeos_update_engine.PartitionInfo old_kernel_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_kernel_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chromeos_update_engine.PartitionInfo new_kernel_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_kernel_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chromeos_update_engine.PartitionInfo old_rootfs_info = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_rootfs_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chromeos_update_engine.PartitionInfo new_rootfs_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_rootfs_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chromeos_update_engine.ImageInfo old_image_info = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_old_image_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chromeos_update_engine.ImageInfo new_image_info = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_image_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 minor_version = 12 [default = 0];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_minor_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minor_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .chromeos_update_engine.PartitionUpdate partitions = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partitions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chromeos_update_engine.DeltaArchiveManifest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chromeos_update_engine.DeltaArchiveManifest)
  return false;
#undef DO_
}

void DeltaArchiveManifest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chromeos_update_engine.DeltaArchiveManifest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chromeos_update_engine.InstallOperation install_operations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->install_operations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->install_operations(static_cast<int>(i)), output);
  }

  // repeated .chromeos_update_engine.InstallOperation kernel_install_operations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kernel_install_operations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->kernel_install_operations(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 block_size = 3 [default = 4096];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->block_size(), output);
  }

  // optional uint64 signatures_offset = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->signatures_offset(), output);
  }

  // optional uint64 signatures_size = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->signatures_size(), output);
  }

  // optional .chromeos_update_engine.PartitionInfo old_kernel_info = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->old_kernel_info_, output);
  }

  // optional .chromeos_update_engine.PartitionInfo new_kernel_info = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->new_kernel_info_, output);
  }

  // optional .chromeos_update_engine.PartitionInfo old_rootfs_info = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->old_rootfs_info_, output);
  }

  // optional .chromeos_update_engine.PartitionInfo new_rootfs_info = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->new_rootfs_info_, output);
  }

  // optional .chromeos_update_engine.ImageInfo old_image_info = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->old_image_info_, output);
  }

  // optional .chromeos_update_engine.ImageInfo new_image_info = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, *this->new_image_info_, output);
  }

  // optional uint32 minor_version = 12 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->minor_version(), output);
  }

  // repeated .chromeos_update_engine.PartitionUpdate partitions = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->partitions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->partitions(static_cast<int>(i)), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chromeos_update_engine.DeltaArchiveManifest)
}

size_t DeltaArchiveManifest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chromeos_update_engine.DeltaArchiveManifest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .chromeos_update_engine.InstallOperation install_operations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->install_operations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->install_operations(static_cast<int>(i)));
    }
  }

  // repeated .chromeos_update_engine.InstallOperation kernel_install_operations = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->kernel_install_operations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kernel_install_operations(static_cast<int>(i)));
    }
  }

  // repeated .chromeos_update_engine.PartitionUpdate partitions = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->partitions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partitions(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .chromeos_update_engine.PartitionInfo old_kernel_info = 6;
    if (has_old_kernel_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->old_kernel_info_);
    }

    // optional .chromeos_update_engine.PartitionInfo new_kernel_info = 7;
    if (has_new_kernel_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->new_kernel_info_);
    }

    // optional .chromeos_update_engine.PartitionInfo old_rootfs_info = 8;
    if (has_old_rootfs_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->old_rootfs_info_);
    }

    // optional .chromeos_update_engine.PartitionInfo new_rootfs_info = 9;
    if (has_new_rootfs_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->new_rootfs_info_);
    }

    // optional .chromeos_update_engine.ImageInfo old_image_info = 10;
    if (has_old_image_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->old_image_info_);
    }

    // optional .chromeos_update_engine.ImageInfo new_image_info = 11;
    if (has_new_image_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->new_image_info_);
    }

    // optional uint64 signatures_offset = 4;
    if (has_signatures_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signatures_offset());
    }

    // optional uint64 signatures_size = 5;
    if (has_signatures_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signatures_size());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 minor_version = 12 [default = 0];
    if (has_minor_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minor_version());
    }

    // optional uint32 block_size = 3 [default = 4096];
    if (has_block_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->block_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeltaArchiveManifest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeltaArchiveManifest*>(&from));
}

void DeltaArchiveManifest::MergeFrom(const DeltaArchiveManifest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chromeos_update_engine.DeltaArchiveManifest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  install_operations_.MergeFrom(from.install_operations_);
  kernel_install_operations_.MergeFrom(from.kernel_install_operations_);
  partitions_.MergeFrom(from.partitions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_old_kernel_info()->::chromeos_update_engine::PartitionInfo::MergeFrom(from.old_kernel_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_new_kernel_info()->::chromeos_update_engine::PartitionInfo::MergeFrom(from.new_kernel_info());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_old_rootfs_info()->::chromeos_update_engine::PartitionInfo::MergeFrom(from.old_rootfs_info());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_new_rootfs_info()->::chromeos_update_engine::PartitionInfo::MergeFrom(from.new_rootfs_info());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_old_image_info()->::chromeos_update_engine::ImageInfo::MergeFrom(from.old_image_info());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_new_image_info()->::chromeos_update_engine::ImageInfo::MergeFrom(from.new_image_info());
    }
    if (cached_has_bits & 0x00000040u) {
      signatures_offset_ = from.signatures_offset_;
    }
    if (cached_has_bits & 0x00000080u) {
      signatures_size_ = from.signatures_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      minor_version_ = from.minor_version_;
    }
    if (cached_has_bits & 0x00000200u) {
      block_size_ = from.block_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeltaArchiveManifest::CopyFrom(const DeltaArchiveManifest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chromeos_update_engine.DeltaArchiveManifest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeltaArchiveManifest::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->install_operations())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->kernel_install_operations())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->partitions())) return false;
  return true;
}

void DeltaArchiveManifest::Swap(DeltaArchiveManifest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeltaArchiveManifest::InternalSwap(DeltaArchiveManifest* other) {
  using std::swap;
  install_operations_.InternalSwap(&other->install_operations_);
  kernel_install_operations_.InternalSwap(&other->kernel_install_operations_);
  partitions_.InternalSwap(&other->partitions_);
  swap(old_kernel_info_, other->old_kernel_info_);
  swap(new_kernel_info_, other->new_kernel_info_);
  swap(old_rootfs_info_, other->old_rootfs_info_);
  swap(new_rootfs_info_, other->new_rootfs_info_);
  swap(old_image_info_, other->old_image_info_);
  swap(new_image_info_, other->new_image_info_);
  swap(signatures_offset_, other->signatures_offset_);
  swap(signatures_size_, other->signatures_size_);
  swap(minor_version_, other->minor_version_);
  swap(block_size_, other->block_size_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::std::string DeltaArchiveManifest::GetTypeName() const {
  return "chromeos_update_engine.DeltaArchiveManifest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeltaArchiveManifest

// repeated .chromeos_update_engine.InstallOperation install_operations = 1;
int DeltaArchiveManifest::install_operations_size() const {
  return install_operations_.size();
}
void DeltaArchiveManifest::clear_install_operations() {
  install_operations_.Clear();
}
const ::chromeos_update_engine::InstallOperation& DeltaArchiveManifest::install_operations(int index) const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.install_operations)
  return install_operations_.Get(index);
}
::chromeos_update_engine::InstallOperation* DeltaArchiveManifest::mutable_install_operations(int index) {
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.DeltaArchiveManifest.install_operations)
  return install_operations_.Mutable(index);
}
::chromeos_update_engine::InstallOperation* DeltaArchiveManifest::add_install_operations() {
  // @@protoc_insertion_point(field_add:chromeos_update_engine.DeltaArchiveManifest.install_operations)
  return install_operations_.Add();
}
::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::InstallOperation >*
DeltaArchiveManifest::mutable_install_operations() {
  // @@protoc_insertion_point(field_mutable_list:chromeos_update_engine.DeltaArchiveManifest.install_operations)
  return &install_operations_;
}
const ::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::InstallOperation >&
DeltaArchiveManifest::install_operations() const {
  // @@protoc_insertion_point(field_list:chromeos_update_engine.DeltaArchiveManifest.install_operations)
  return install_operations_;
}

// repeated .chromeos_update_engine.InstallOperation kernel_install_operations = 2;
int DeltaArchiveManifest::kernel_install_operations_size() const {
  return kernel_install_operations_.size();
}
void DeltaArchiveManifest::clear_kernel_install_operations() {
  kernel_install_operations_.Clear();
}
const ::chromeos_update_engine::InstallOperation& DeltaArchiveManifest::kernel_install_operations(int index) const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.kernel_install_operations)
  return kernel_install_operations_.Get(index);
}
::chromeos_update_engine::InstallOperation* DeltaArchiveManifest::mutable_kernel_install_operations(int index) {
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.DeltaArchiveManifest.kernel_install_operations)
  return kernel_install_operations_.Mutable(index);
}
::chromeos_update_engine::InstallOperation* DeltaArchiveManifest::add_kernel_install_operations() {
  // @@protoc_insertion_point(field_add:chromeos_update_engine.DeltaArchiveManifest.kernel_install_operations)
  return kernel_install_operations_.Add();
}
::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::InstallOperation >*
DeltaArchiveManifest::mutable_kernel_install_operations() {
  // @@protoc_insertion_point(field_mutable_list:chromeos_update_engine.DeltaArchiveManifest.kernel_install_operations)
  return &kernel_install_operations_;
}
const ::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::InstallOperation >&
DeltaArchiveManifest::kernel_install_operations() const {
  // @@protoc_insertion_point(field_list:chromeos_update_engine.DeltaArchiveManifest.kernel_install_operations)
  return kernel_install_operations_;
}

// optional uint32 block_size = 3 [default = 4096];
bool DeltaArchiveManifest::has_block_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DeltaArchiveManifest::set_has_block_size() {
  _has_bits_[0] |= 0x00000200u;
}
void DeltaArchiveManifest::clear_has_block_size() {
  _has_bits_[0] &= ~0x00000200u;
}
void DeltaArchiveManifest::clear_block_size() {
  block_size_ = 4096u;
  clear_has_block_size();
}
::google::protobuf::uint32 DeltaArchiveManifest::block_size() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.block_size)
  return block_size_;
}
void DeltaArchiveManifest::set_block_size(::google::protobuf::uint32 value) {
  set_has_block_size();
  block_size_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.DeltaArchiveManifest.block_size)
}

// optional uint64 signatures_offset = 4;
bool DeltaArchiveManifest::has_signatures_offset() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DeltaArchiveManifest::set_has_signatures_offset() {
  _has_bits_[0] |= 0x00000040u;
}
void DeltaArchiveManifest::clear_has_signatures_offset() {
  _has_bits_[0] &= ~0x00000040u;
}
void DeltaArchiveManifest::clear_signatures_offset() {
  signatures_offset_ = GOOGLE_ULONGLONG(0);
  clear_has_signatures_offset();
}
::google::protobuf::uint64 DeltaArchiveManifest::signatures_offset() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.signatures_offset)
  return signatures_offset_;
}
void DeltaArchiveManifest::set_signatures_offset(::google::protobuf::uint64 value) {
  set_has_signatures_offset();
  signatures_offset_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.DeltaArchiveManifest.signatures_offset)
}

// optional uint64 signatures_size = 5;
bool DeltaArchiveManifest::has_signatures_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DeltaArchiveManifest::set_has_signatures_size() {
  _has_bits_[0] |= 0x00000080u;
}
void DeltaArchiveManifest::clear_has_signatures_size() {
  _has_bits_[0] &= ~0x00000080u;
}
void DeltaArchiveManifest::clear_signatures_size() {
  signatures_size_ = GOOGLE_ULONGLONG(0);
  clear_has_signatures_size();
}
::google::protobuf::uint64 DeltaArchiveManifest::signatures_size() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.signatures_size)
  return signatures_size_;
}
void DeltaArchiveManifest::set_signatures_size(::google::protobuf::uint64 value) {
  set_has_signatures_size();
  signatures_size_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.DeltaArchiveManifest.signatures_size)
}

// optional .chromeos_update_engine.PartitionInfo old_kernel_info = 6;
bool DeltaArchiveManifest::has_old_kernel_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeltaArchiveManifest::set_has_old_kernel_info() {
  _has_bits_[0] |= 0x00000001u;
}
void DeltaArchiveManifest::clear_has_old_kernel_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeltaArchiveManifest::clear_old_kernel_info() {
  if (old_kernel_info_ != NULL) old_kernel_info_->::chromeos_update_engine::PartitionInfo::Clear();
  clear_has_old_kernel_info();
}
const ::chromeos_update_engine::PartitionInfo& DeltaArchiveManifest::old_kernel_info() const {
  const ::chromeos_update_engine::PartitionInfo* p = old_kernel_info_;
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.old_kernel_info)
  return p != NULL ? *p : *reinterpret_cast<const ::chromeos_update_engine::PartitionInfo*>(
      &::chromeos_update_engine::_PartitionInfo_default_instance_);
}
::chromeos_update_engine::PartitionInfo* DeltaArchiveManifest::mutable_old_kernel_info() {
  set_has_old_kernel_info();
  if (old_kernel_info_ == NULL) {
    old_kernel_info_ = new ::chromeos_update_engine::PartitionInfo;
  }
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.DeltaArchiveManifest.old_kernel_info)
  return old_kernel_info_;
}
::chromeos_update_engine::PartitionInfo* DeltaArchiveManifest::release_old_kernel_info() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.DeltaArchiveManifest.old_kernel_info)
  clear_has_old_kernel_info();
  ::chromeos_update_engine::PartitionInfo* temp = old_kernel_info_;
  old_kernel_info_ = NULL;
  return temp;
}
void DeltaArchiveManifest::set_allocated_old_kernel_info(::chromeos_update_engine::PartitionInfo* old_kernel_info) {
  delete old_kernel_info_;
  old_kernel_info_ = old_kernel_info;
  if (old_kernel_info) {
    set_has_old_kernel_info();
  } else {
    clear_has_old_kernel_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.DeltaArchiveManifest.old_kernel_info)
}

// optional .chromeos_update_engine.PartitionInfo new_kernel_info = 7;
bool DeltaArchiveManifest::has_new_kernel_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeltaArchiveManifest::set_has_new_kernel_info() {
  _has_bits_[0] |= 0x00000002u;
}
void DeltaArchiveManifest::clear_has_new_kernel_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeltaArchiveManifest::clear_new_kernel_info() {
  if (new_kernel_info_ != NULL) new_kernel_info_->::chromeos_update_engine::PartitionInfo::Clear();
  clear_has_new_kernel_info();
}
const ::chromeos_update_engine::PartitionInfo& DeltaArchiveManifest::new_kernel_info() const {
  const ::chromeos_update_engine::PartitionInfo* p = new_kernel_info_;
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.new_kernel_info)
  return p != NULL ? *p : *reinterpret_cast<const ::chromeos_update_engine::PartitionInfo*>(
      &::chromeos_update_engine::_PartitionInfo_default_instance_);
}
::chromeos_update_engine::PartitionInfo* DeltaArchiveManifest::mutable_new_kernel_info() {
  set_has_new_kernel_info();
  if (new_kernel_info_ == NULL) {
    new_kernel_info_ = new ::chromeos_update_engine::PartitionInfo;
  }
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.DeltaArchiveManifest.new_kernel_info)
  return new_kernel_info_;
}
::chromeos_update_engine::PartitionInfo* DeltaArchiveManifest::release_new_kernel_info() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.DeltaArchiveManifest.new_kernel_info)
  clear_has_new_kernel_info();
  ::chromeos_update_engine::PartitionInfo* temp = new_kernel_info_;
  new_kernel_info_ = NULL;
  return temp;
}
void DeltaArchiveManifest::set_allocated_new_kernel_info(::chromeos_update_engine::PartitionInfo* new_kernel_info) {
  delete new_kernel_info_;
  new_kernel_info_ = new_kernel_info;
  if (new_kernel_info) {
    set_has_new_kernel_info();
  } else {
    clear_has_new_kernel_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.DeltaArchiveManifest.new_kernel_info)
}

// optional .chromeos_update_engine.PartitionInfo old_rootfs_info = 8;
bool DeltaArchiveManifest::has_old_rootfs_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeltaArchiveManifest::set_has_old_rootfs_info() {
  _has_bits_[0] |= 0x00000004u;
}
void DeltaArchiveManifest::clear_has_old_rootfs_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeltaArchiveManifest::clear_old_rootfs_info() {
  if (old_rootfs_info_ != NULL) old_rootfs_info_->::chromeos_update_engine::PartitionInfo::Clear();
  clear_has_old_rootfs_info();
}
const ::chromeos_update_engine::PartitionInfo& DeltaArchiveManifest::old_rootfs_info() const {
  const ::chromeos_update_engine::PartitionInfo* p = old_rootfs_info_;
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.old_rootfs_info)
  return p != NULL ? *p : *reinterpret_cast<const ::chromeos_update_engine::PartitionInfo*>(
      &::chromeos_update_engine::_PartitionInfo_default_instance_);
}
::chromeos_update_engine::PartitionInfo* DeltaArchiveManifest::mutable_old_rootfs_info() {
  set_has_old_rootfs_info();
  if (old_rootfs_info_ == NULL) {
    old_rootfs_info_ = new ::chromeos_update_engine::PartitionInfo;
  }
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.DeltaArchiveManifest.old_rootfs_info)
  return old_rootfs_info_;
}
::chromeos_update_engine::PartitionInfo* DeltaArchiveManifest::release_old_rootfs_info() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.DeltaArchiveManifest.old_rootfs_info)
  clear_has_old_rootfs_info();
  ::chromeos_update_engine::PartitionInfo* temp = old_rootfs_info_;
  old_rootfs_info_ = NULL;
  return temp;
}
void DeltaArchiveManifest::set_allocated_old_rootfs_info(::chromeos_update_engine::PartitionInfo* old_rootfs_info) {
  delete old_rootfs_info_;
  old_rootfs_info_ = old_rootfs_info;
  if (old_rootfs_info) {
    set_has_old_rootfs_info();
  } else {
    clear_has_old_rootfs_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.DeltaArchiveManifest.old_rootfs_info)
}

// optional .chromeos_update_engine.PartitionInfo new_rootfs_info = 9;
bool DeltaArchiveManifest::has_new_rootfs_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DeltaArchiveManifest::set_has_new_rootfs_info() {
  _has_bits_[0] |= 0x00000008u;
}
void DeltaArchiveManifest::clear_has_new_rootfs_info() {
  _has_bits_[0] &= ~0x00000008u;
}
void DeltaArchiveManifest::clear_new_rootfs_info() {
  if (new_rootfs_info_ != NULL) new_rootfs_info_->::chromeos_update_engine::PartitionInfo::Clear();
  clear_has_new_rootfs_info();
}
const ::chromeos_update_engine::PartitionInfo& DeltaArchiveManifest::new_rootfs_info() const {
  const ::chromeos_update_engine::PartitionInfo* p = new_rootfs_info_;
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.new_rootfs_info)
  return p != NULL ? *p : *reinterpret_cast<const ::chromeos_update_engine::PartitionInfo*>(
      &::chromeos_update_engine::_PartitionInfo_default_instance_);
}
::chromeos_update_engine::PartitionInfo* DeltaArchiveManifest::mutable_new_rootfs_info() {
  set_has_new_rootfs_info();
  if (new_rootfs_info_ == NULL) {
    new_rootfs_info_ = new ::chromeos_update_engine::PartitionInfo;
  }
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.DeltaArchiveManifest.new_rootfs_info)
  return new_rootfs_info_;
}
::chromeos_update_engine::PartitionInfo* DeltaArchiveManifest::release_new_rootfs_info() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.DeltaArchiveManifest.new_rootfs_info)
  clear_has_new_rootfs_info();
  ::chromeos_update_engine::PartitionInfo* temp = new_rootfs_info_;
  new_rootfs_info_ = NULL;
  return temp;
}
void DeltaArchiveManifest::set_allocated_new_rootfs_info(::chromeos_update_engine::PartitionInfo* new_rootfs_info) {
  delete new_rootfs_info_;
  new_rootfs_info_ = new_rootfs_info;
  if (new_rootfs_info) {
    set_has_new_rootfs_info();
  } else {
    clear_has_new_rootfs_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.DeltaArchiveManifest.new_rootfs_info)
}

// optional .chromeos_update_engine.ImageInfo old_image_info = 10;
bool DeltaArchiveManifest::has_old_image_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DeltaArchiveManifest::set_has_old_image_info() {
  _has_bits_[0] |= 0x00000010u;
}
void DeltaArchiveManifest::clear_has_old_image_info() {
  _has_bits_[0] &= ~0x00000010u;
}
void DeltaArchiveManifest::clear_old_image_info() {
  if (old_image_info_ != NULL) old_image_info_->::chromeos_update_engine::ImageInfo::Clear();
  clear_has_old_image_info();
}
const ::chromeos_update_engine::ImageInfo& DeltaArchiveManifest::old_image_info() const {
  const ::chromeos_update_engine::ImageInfo* p = old_image_info_;
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.old_image_info)
  return p != NULL ? *p : *reinterpret_cast<const ::chromeos_update_engine::ImageInfo*>(
      &::chromeos_update_engine::_ImageInfo_default_instance_);
}
::chromeos_update_engine::ImageInfo* DeltaArchiveManifest::mutable_old_image_info() {
  set_has_old_image_info();
  if (old_image_info_ == NULL) {
    old_image_info_ = new ::chromeos_update_engine::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.DeltaArchiveManifest.old_image_info)
  return old_image_info_;
}
::chromeos_update_engine::ImageInfo* DeltaArchiveManifest::release_old_image_info() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.DeltaArchiveManifest.old_image_info)
  clear_has_old_image_info();
  ::chromeos_update_engine::ImageInfo* temp = old_image_info_;
  old_image_info_ = NULL;
  return temp;
}
void DeltaArchiveManifest::set_allocated_old_image_info(::chromeos_update_engine::ImageInfo* old_image_info) {
  delete old_image_info_;
  old_image_info_ = old_image_info;
  if (old_image_info) {
    set_has_old_image_info();
  } else {
    clear_has_old_image_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.DeltaArchiveManifest.old_image_info)
}

// optional .chromeos_update_engine.ImageInfo new_image_info = 11;
bool DeltaArchiveManifest::has_new_image_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DeltaArchiveManifest::set_has_new_image_info() {
  _has_bits_[0] |= 0x00000020u;
}
void DeltaArchiveManifest::clear_has_new_image_info() {
  _has_bits_[0] &= ~0x00000020u;
}
void DeltaArchiveManifest::clear_new_image_info() {
  if (new_image_info_ != NULL) new_image_info_->::chromeos_update_engine::ImageInfo::Clear();
  clear_has_new_image_info();
}
const ::chromeos_update_engine::ImageInfo& DeltaArchiveManifest::new_image_info() const {
  const ::chromeos_update_engine::ImageInfo* p = new_image_info_;
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.new_image_info)
  return p != NULL ? *p : *reinterpret_cast<const ::chromeos_update_engine::ImageInfo*>(
      &::chromeos_update_engine::_ImageInfo_default_instance_);
}
::chromeos_update_engine::ImageInfo* DeltaArchiveManifest::mutable_new_image_info() {
  set_has_new_image_info();
  if (new_image_info_ == NULL) {
    new_image_info_ = new ::chromeos_update_engine::ImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.DeltaArchiveManifest.new_image_info)
  return new_image_info_;
}
::chromeos_update_engine::ImageInfo* DeltaArchiveManifest::release_new_image_info() {
  // @@protoc_insertion_point(field_release:chromeos_update_engine.DeltaArchiveManifest.new_image_info)
  clear_has_new_image_info();
  ::chromeos_update_engine::ImageInfo* temp = new_image_info_;
  new_image_info_ = NULL;
  return temp;
}
void DeltaArchiveManifest::set_allocated_new_image_info(::chromeos_update_engine::ImageInfo* new_image_info) {
  delete new_image_info_;
  new_image_info_ = new_image_info;
  if (new_image_info) {
    set_has_new_image_info();
  } else {
    clear_has_new_image_info();
  }
  // @@protoc_insertion_point(field_set_allocated:chromeos_update_engine.DeltaArchiveManifest.new_image_info)
}

// optional uint32 minor_version = 12 [default = 0];
bool DeltaArchiveManifest::has_minor_version() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DeltaArchiveManifest::set_has_minor_version() {
  _has_bits_[0] |= 0x00000100u;
}
void DeltaArchiveManifest::clear_has_minor_version() {
  _has_bits_[0] &= ~0x00000100u;
}
void DeltaArchiveManifest::clear_minor_version() {
  minor_version_ = 0u;
  clear_has_minor_version();
}
::google::protobuf::uint32 DeltaArchiveManifest::minor_version() const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.minor_version)
  return minor_version_;
}
void DeltaArchiveManifest::set_minor_version(::google::protobuf::uint32 value) {
  set_has_minor_version();
  minor_version_ = value;
  // @@protoc_insertion_point(field_set:chromeos_update_engine.DeltaArchiveManifest.minor_version)
}

// repeated .chromeos_update_engine.PartitionUpdate partitions = 13;
int DeltaArchiveManifest::partitions_size() const {
  return partitions_.size();
}
void DeltaArchiveManifest::clear_partitions() {
  partitions_.Clear();
}
const ::chromeos_update_engine::PartitionUpdate& DeltaArchiveManifest::partitions(int index) const {
  // @@protoc_insertion_point(field_get:chromeos_update_engine.DeltaArchiveManifest.partitions)
  return partitions_.Get(index);
}
::chromeos_update_engine::PartitionUpdate* DeltaArchiveManifest::mutable_partitions(int index) {
  // @@protoc_insertion_point(field_mutable:chromeos_update_engine.DeltaArchiveManifest.partitions)
  return partitions_.Mutable(index);
}
::chromeos_update_engine::PartitionUpdate* DeltaArchiveManifest::add_partitions() {
  // @@protoc_insertion_point(field_add:chromeos_update_engine.DeltaArchiveManifest.partitions)
  return partitions_.Add();
}
::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::PartitionUpdate >*
DeltaArchiveManifest::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:chromeos_update_engine.DeltaArchiveManifest.partitions)
  return &partitions_;
}
const ::google::protobuf::RepeatedPtrField< ::chromeos_update_engine::PartitionUpdate >&
DeltaArchiveManifest::partitions() const {
  // @@protoc_insertion_point(field_list:chromeos_update_engine.DeltaArchiveManifest.partitions)
  return partitions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chromeos_update_engine

// @@protoc_insertion_point(global_scope)
